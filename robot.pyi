from setting import *
import abc

from abc import ABC, abstractmethod
from selenium.webdriver.remote.webelement import WebElement as WebElement
from selenium.webdriver import ChromeOptions, Chrome
from selenium.webdriver.chrome.service import Service
from typing import List, Optional

class Robot(ABC, metaclass=abc.ABCMeta):
    task: dict
    url: str
    task_type: int
    options: Optional[ChromeOptions]
    service: Optional[Service]
    driver: Optional[Chrome]
    def __init__(self, **kwargs) -> None: ...
    @abstractmethod
    def run_task(self): ...
    def kill_robot(self) -> None: ...
    def wait_ele_click_xpath_safe(self, xpath: str, timeout: int = ...): ...
    def wait_ele_xpath_safe(self, xpath: str, timeout: int = ...) -> bool: ...
    def wait_click_xpath(self, xpath: str, timeout: int = ...): ...
    def find_ele_click_xpath(self, xpath: str): ...
    def send_keys_xpath(self, xpath: str, keys: str): ...
    def find_eles_xpath(self, xpath: str) -> list: ...
    def click_to_last_window_xpath(self, xpath: str): ...
    def get_ele_text(self, xpath: str) -> str: ...
    def input_clear_xpath(self, xpath: str): ...
    def switch_last_window(self) -> None: ...
    def refresh(self) -> None: ...
    def find_ele_xpath_safe(self, xpath: str) -> bool: ...
    def find_ele_xpath(self, xpath: str): ...
    def close_window(self) -> None: ...
    def wait_ele_by_xpath(self, xpath, timeout: int = ...) -> None: ...
    def switch_default_windows(self) -> None: ...
    def wait_find_by_xpath(self, xpath, timeout: int = ...) -> WebElement: ...
    def wait_eles_by_xpath(self, xpath, timeout: int = ...) -> List[WebElement]: ...
    def scroll_to_element_safe(self, ele) -> None: ...
    def execute_script(self, **kwargs) -> None: ...
    def slide_to_right(self) -> None: ...

class DataBaseInfo:
    host: str
    user: str
    password: str
    database: str
    port: int
    def __init__(self, host, user, password, database, port) -> None: ...

